!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n(require("jison")):"function"==typeof define&&define.amd?define(["jison"],n):((e="undefined"!=typeof globalThis?globalThis:e||self).bondage=e.bondage||{},e.bondage.js=n(e.jison))}(this,(function(e){"use strict";function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=n(e);class s{}class i{}class o{}class a{}class r{}class d{}class l{}var u={types:{Text:s,Shortcut:i,Conditional:o,Assignment:a,Literal:r,Expression:d,FunctionCall:l},DialogShortcutNode:class extends i{constructor(e,n,t,s=[],i){super(),this.type="DialogShortcutNode",this.text=e,this.content=n,this.lineNum=t.first_line,this.hashtags=s,this.conditionalExpression=i}},IfNode:class extends o{constructor(e,n){super(),this.type="IfNode",this.expression=e,this.statement=n}},IfElseNode:class extends o{constructor(e,n,t){super(),this.type="IfElseNode",this.expression=e,this.statement=n,this.elseStatement=t}},ElseNode:class extends o{constructor(e){super(),this.type="ElseNode",this.statement=e}},ElseIfNode:class extends o{constructor(e,n,t){super(),this.type="ElseIfNode",this.expression=e,this.statement=n,this.elseStatement=t}},TextNode:class extends s{constructor(e,n,t=[]){super(),this.type="TextNode",this.text=e,this.lineNum=n?n.first_line:-1,this.hashtags=t}},NumericLiteralNode:class extends r{constructor(e){super(),this.type="NumericLiteralNode",this.numericLiteral=e}},StringLiteralNode:class extends r{constructor(e){super(),this.type="StringLiteralNode",this.stringLiteral=e}},BooleanLiteralNode:class extends r{constructor(e){super(),this.type="BooleanLiteralNode",this.booleanLiteral=e}},VariableNode:class extends r{constructor(e){super(),this.type="VariableNode",this.variableName=e}},UnaryMinusExpressionNode:class extends d{constructor(e){super(),this.type="UnaryMinusExpressionNode",this.expression=e}},ArithmeticExpressionAddNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionAddNode",this.expression1=e,this.expression2=n}},ArithmeticExpressionMinusNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionMinusNode",this.expression1=e,this.expression2=n}},ArithmeticExpressionMultiplyNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionMultiplyNode",this.expression1=e,this.expression2=n}},ArithmeticExpressionExponentNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionExponentNode",this.expression1=e,this.expression2=n}},ArithmeticExpressionDivideNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionDivideNode",this.expression1=e,this.expression2=n}},ArithmeticExpressionModuloNode:class extends d{constructor(e,n){super(),this.type="ArithmeticExpressionModuloNode",this.expression1=e,this.expression2=n}},NegatedBooleanExpressionNode:class extends d{constructor(e){super(),this.type="NegatedBooleanExpressionNode",this.expression=e}},BooleanOrExpressionNode:class extends d{constructor(e,n){super(),this.type="BooleanOrExpressionNode",this.expression1=e,this.expression2=n}},BooleanAndExpressionNode:class extends d{constructor(e,n){super(),this.type="BooleanAndExpressionNode",this.expression1=e,this.expression2=n}},BooleanXorExpressionNode:class extends d{constructor(e,n){super(),this.type="BooleanXorExpressionNode",this.expression1=e,this.expression2=n}},EqualToExpressionNode:class extends d{constructor(e,n){super(),this.type="EqualToExpressionNode",this.expression1=e,this.expression2=n}},NotEqualToExpressionNode:class extends d{constructor(e,n){super(),this.type="NotEqualToExpressionNode",this.expression1=e,this.expression2=n}},GreaterThanExpressionNode:class extends d{constructor(e,n){super(),this.type="GreaterThanExpressionNode",this.expression1=e,this.expression2=n}},GreaterThanOrEqualToExpressionNode:class extends d{constructor(e,n){super(),this.type="GreaterThanOrEqualToExpressionNode",this.expression1=e,this.expression2=n}},LessThanExpressionNode:class extends d{constructor(e,n){super(),this.type="LessThanExpressionNode",this.expression1=e,this.expression2=n}},LessThanOrEqualToExpressionNode:class extends d{constructor(e,n){super(),this.type="LessThanOrEqualToExpressionNode",this.expression1=e,this.expression2=n}},SetVariableEqualToNode:class extends a{constructor(e,n){super(),this.type="SetVariableEqualToNode",this.variableName=e,this.expression=n}},FunctionResultNode:class extends l{constructor(e,n,t,s=[]){super(),this.type="FunctionResultNode",this.functionName=e,this.args=n,this.lineNum=t?t.first_line:-1,this.hashtags=s}},JumpNode:class extends l{constructor(e){super(),this.type="JumpNode",this.destination=e}},StopNode:class extends l{constructor(){super(),this.type="StopNode"}},InlineExpressionNode:class extends d{constructor(e,n,t=[]){super(),this.type="InlineExpressionNode",this.expression=e,this.lineNum=n.first_line,this.hashtags=t}}};var h={Whitespace:null,Indent:null,Dedent:null,EndOfLine:/\n/,EndOfInput:null,Number:/-?[0-9]+(\.[0-9+])?/,String:/"([^"\\]*(?:\\.[^"\\]*)*)"/,BeginCommand:/<</,EndCommand:/>>/,Variable:/\$([A-Za-z0-9_.])+/,ShortcutOption:/->/,Hashtag:/#([^(\s|#|//)]+)/,Comment:/\/\/.*/,OptionStart:/\[\[/,OptionDelimit:/\|/,OptionEnd:/\]\]/,If:/if(?!\w)/,ElseIf:/elseif(?!\w)/,Else:/else(?!\w)/,EndIf:/endif(?!\w)/,Jump:/jump(?!\w)/,Stop:/stop(?!\w)/,Set:/set(?!\w)/,Declare:/declare(?!\w)/,As:/as(?!\w)/,ExplicitType:/(String|Number|Bool)(?=>>)/,True:/true(?!\w)/,False:/false(?!\w)/,Null:/null(?!\w)/,LeftParen:/\(/,RightParen:/\)/,Comma:/,/,UnaryMinus:/-(?!\s)/,EqualTo:/(==|is(?!\w)|eq(?!\w))/,GreaterThan:/(>|gt(?!\w))/,GreaterThanOrEqualTo:/(>=|gte(?!\w))/,LessThan:/(<|lt(?!\w))/,LessThanOrEqualTo:/(<=|lte(?!\w))/,NotEqualTo:/(!=|neq(?!\w))/,Or:/(\|\||or(?!\w))/,And:/(&&|and(?!\w))/,Xor:/(\^|xor(?!\w))/,Not:/(!|not(?!\w))/,EqualToOrAssign:/(=|to(?!\w))/,Add:/\+/,Minus:/-/,Exponent:/\*\*/,Multiply:/\*/,Divide:/\//,Modulo:/%/,AddAssign:/\+=/,MinusAssign:/-=/,MultiplyAssign:/\*=/,DivideAssign:/\/=/,Identifier:/[a-zA-Z0-9_:.]+/,EscapedCharacter:/\\./,Text:/[^\\]/,BeginInlineExp:/{/,EndInlineExp:/}/};var p=class{constructor(){this.transitions=[],this.textRule=null,this.isTrackingNextIndentation=!1,this.isEmittingEndOfLineTokens=!1}addTransition(e,n,t){return this.transitions.push({token:e,regex:h[e],state:n||null,delimitsText:t||!1}),this}addTextRule(e,n){if(this.textRule)throw new Error("Cannot add more than one text rule to a state.");const t=[];this.transitions.forEach((e=>{e.delimitsText&&t.push(`(${e.regex.source})`)}));const s=`((?!${t.join("|")}).)+`;return this.addTransition(e,n),this.textRule=this.transitions[this.transitions.length-1],this.textRule.regex=new RegExp(s),this}setTrackNextIndentation(e){return this.isTrackingNextIndentation=e,this}};var c={makeStates:function(){return{base:(new p).addTransition("EscapedCharacter",null,!0).addTransition("Comment",null,!0).addTransition("Hashtag",null,!0).addTransition("BeginCommand","command",!0).addTransition("BeginInlineExp","inlineExpression",!0).addTransition("ShortcutOption","shortcutOption").addTextRule("Text"),shortcutOption:(new p).setTrackNextIndentation(!0).addTransition("EscapedCharacter",null,!0).addTransition("Comment",null,!0).addTransition("Hashtag",null,!0).addTransition("BeginCommand","expression",!0).addTransition("BeginInlineExp","inlineExpressionInShortcut",!0).addTextRule("Text","base"),command:(new p).addTransition("If","expression").addTransition("Else").addTransition("ElseIf","expression").addTransition("EndIf").addTransition("Set","assignment").addTransition("Declare","declare").addTransition("Jump","jump").addTransition("Stop","stop").addTransition("EndCommand","base",!0).addTransition("Identifier","commandArg",!0).addTextRule("Text"),commandArg:(new p).addTransition("BeginInlineExp","inlineExpressionInCommand",!0).addTransition("EndCommand","base",!0).addTransition("LeftParen","commandParenArgOrExpression").addTransition("Variable").addTransition("Number").addTransition("String").addTransition("True").addTransition("False").addTransition("Identifier").addTransition("Comma").addTransition("RightParen"),commandParenArgOrExpression:(new p).addTransition("EndCommand","base",!0).addTransition("LeftParen","expression").addTransition("Variable","expression").addTransition("Number","expression").addTransition("String").addTransition("True").addTransition("False").addTransition("Null").addTransition("RightParen"),assignment:(new p).addTransition("Variable").addTransition("EqualToOrAssign","expression"),declare:(new p).addTransition("Variable").addTransition("EndCommand","base").addTransition("EqualToOrAssign","expression"),jump:(new p).addTransition("Identifier").addTransition("BeginInlineExp","inlineExpressionInCommand",!0).addTransition("EndCommand","base",!0),stop:(new p).addTransition("EndCommand","base",!0),expression:(new p).addTransition("As").addTransition("ExplicitType").addTransition("EndCommand","base").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule(),inlineExpression:(new p).addTransition("EndInlineExp","base").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base"),inlineExpressionInCommand:(new p).addTransition("EndInlineExp","commandArg").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base"),inlineExpressionInShortcut:(new p).addTransition("EndInlineExp","shortcutOption").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base")}}};var x=class{constructor(){this.states=c.makeStates(),this.state="base",this.originalText="",this.lines=[],this.indentation=[[0,!1]],this.shouldTrackNextIndentation=!1,this.previousLevelOfIndentation=0,this.reset()}reset(){this.yytext="",this.yylloc={first_column:1,first_line:1,last_column:1,last_line:1},this.yylineno=1}lex(){if(this.isAtTheEndOfText()){this.yytext="";const e=this.indentation.pop();return e&&e[1]?"Dedent":"EndOfInput"}return this.isAtTheEndOfLine()?(this.advanceLine(),"EndOfLine"):this.lexNextTokenOnCurrentLine()}advanceLine(){this.yylineno+=1;const e=this.getCurrentLine().replace(/\t/,"    ");this.lines[this.yylineno-1]=e,this.previousLevelOfIndentation=this.getLastRecordedIndentation()[0],this.yytext="",this.yylloc={first_column:1,first_line:this.yylineno,last_column:1,last_line:this.yylineno}}lexNextTokenOnCurrentLine(){const e=this.getCurrentLineIndentation();if(this.shouldTrackNextIndentation&&e>this.previousLevelOfIndentation)return this.indentation.push([e,!0]),this.shouldTrackNextIndentation=!1,this.yylloc.first_column=this.yylloc.last_column,this.yylloc.last_column+=e,this.yytext="","Indent";if(e<this.getLastRecordedIndentation()[0]){if(this.indentation.pop()[1])return this.yytext="",this.previousLevelOfIndentation=this.getLastRecordedIndentation()[0],"Dedent";this.lexNextTokenOnCurrentLine()}e===this.previousLevelOfIndentation&&1===this.yylloc.last_column&&(this.yylloc.last_column+=e);const n=this.getState().transitions;for(let t=0,s=n.length;t<s;t+=1){const s=n[t],i=this.getCurrentLine().substring(this.yylloc.last_column-1).match(s.regex);if(null!==i&&0===i.index){const n=i[0];this.yytext=this.getCurrentLine().substr(this.yylloc.last_column-1,n.length),"String"===s.token&&(this.yytext=this.yytext.substring(1,this.yytext.length-1).replace(/\\/g,"")),this.yylloc.first_column=this.yylloc.last_column,this.yylloc.last_column+=n.length,s.state&&(this.setState(s.state),this.shouldTrackNextIndentation&&this.getLastRecordedIndentation()[0]<e&&this.indentation.push([e,!1]));const t=this.states[s.state],o=!t||t.transitions.find((e=>"Text"===e.token));if("EndInlineExp"!==s.token&&"EscapedCharacter"!==s.token||!o){const e=this.getCurrentLine().substring(this.yylloc.last_column-1).match(/^\s*/);e[0]&&(this.yylloc.last_column+=e[0].length)}return s.token}}throw new Error(`Invalid syntax in: ${this.getCurrentLine()}`)}setState(e){if(void 0===this.states[e])throw new Error(`Cannot set the unknown state [${e}]`);this.state=e,this.getState().isTrackingNextIndentation&&(this.shouldTrackNextIndentation=!0)}setInput(e){this.originalText=e.replace(/(\r\n)/g,"\n").replace(/\r/g,"\n").replace(/[\n\r]+$/,""),this.lines=this.originalText.split("\n"),this.reset()}getState(){return this.states[this.state]}getCurrentLine(){return this.lines[this.yylineno-1]}getCurrentLineIndentation(){return this.getCurrentLine().match(/^(\s*)/g)[0].length}getLastRecordedIndentation(){return 0===this.indentation.length?[0,!1]:this.indentation[this.indentation.length-1]}isAtTheEndOfText(){return this.isAtTheEndOfLine()&&this.yylloc.first_line>=this.lines.length}isAtTheEndOfLine(){return this.yylloc.last_column>this.getCurrentLine().length}};t.default.print=()=>{};const T=new t.default.Parser({operators:[["left","Comma"],["left","EqualToOrAssign","AddAssign","MinusAssign","MultiplyAssign","DivideAssign"],["left","Not"],["left","Or"],["left","And"],["left","Xor"],["left","EqualTo","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","NotEqualTo"],["left","Add","Minus"],["left","Multiply","Exponent","Divide"],["left","UnaryMinus"],["left","LeftParen","RightParen"]],start:["node"],bnf:{node:[["statements EndOfInput","return $1.flat();"]],statements:[["conditionalBlock","$$ = [$1];"],["statements conditionalBlock","$$ = $1.concat($2);"],["statement","$$ = [$1];"],["statements statement","$$ = $1.concat([$2]);"]],statement:[["text","$$ = $1"],["shortcut","$$ = [$1];"],["genericCommand","$$ = [$1];"],["assignmentCommand","$$ = [$1];"],["jumpCommand","$$ = [$1];"],["stopCommand","$$ = [$1];"],["statement Comment","$$ = $1;"],["statement hashtags","$$ = $1.map(s => Object.assign(s, { hashtags: $2 }));"],["statement EndOfLine","$$ = $1;"]],escapedTextRaw:[["Text","$$ = $1;"],["EscapedCharacter","$$ = $1.substring(1);"],["escapedTextRaw EscapedCharacter","$$ = $1.concat($2.substring(1));"],["EscapedCharacter escapedTextRaw","$$ = $1.substring(1).concat($2);"]],escapedText:[["escapedTextRaw","$$ = new yy.TextNode($1, @$);"]],text:[["escapedText","$$ = [$1]"],["inlineExpression","$$ = [$1];"],["text text","$$ = $1.concat($2); "]],hashtags:[["Hashtag","$$ = [$1.substring(1)];"],["Hashtag hashtags","$$ = [$1.substring(1)].concat($2);"]],conditional:[["BeginCommand If expression EndCommand","$$ = $3"]],conditionalBlock:[["conditional EndOfLine statements BeginCommand EndIf EndCommand","$$ = new yy.IfNode($1, $3.flat());"],["conditional EndOfLine statements additionalConditionalBlocks","$$ = new yy.IfElseNode($1, $3.flat(), $4);"],["conditionalBlock EndOfLine","$$ = $1;"]],else:[["BeginCommand Else EndCommand","$$ = undefined"],["else EndOfLine","$$ = undefined"]],elseif:[["BeginCommand ElseIf expression EndCommand","$$ = $3;"],["elseif EndOfLine","$$ = $1;"]],additionalConditionalBlocks:[["else statements BeginCommand EndIf EndCommand","$$ = new yy.ElseNode($2.flat());"],["elseif statements BeginCommand EndIf EndCommand","$$ = new yy.ElseIfNode($1, $2.flat());"],["elseif statements additionalConditionalBlocks","$$ = new yy.ElseIfNode($1, $2.flat(), $3);"]],shortcutOption:[["ShortcutOption text","$$ = { text: $2 };"],["ShortcutOption text conditional","$$ = { text: $2, conditional: $3 };"],["shortcutOption hashtags","$$ = { ...$1, hashtags: $2 }"],["shortcutOption Comment","$$ = $1"],["shortcutOption hashtags Comment","$$ = { ...$1, hashtags: $2 }"],["shortcutOption EndOfLine","$$ = $1"]],shortcut:[["shortcutOption","$$ = new yy.DialogShortcutNode($1.text, undefined, @$, $1.hashtags, $1.conditional);"],["shortcutOption EndOfLine Indent statements Dedent","$$ = new yy.DialogShortcutNode($1.text, $4.flat(), @$, $1.hashtags, $1.conditional);"]],genericCommand:[["BeginCommand Identifier EndCommand","$$ = new yy.FunctionResultNode($2, [], @$);"],["BeginCommand Identifier genericCommandArguments EndCommand","$$ = new yy.FunctionResultNode($2, $3, @$);"]],genericCommandArguments:[["genericCommandArgument","$$ = [$1];"],["genericCommandArguments genericCommandArgument","$$ = $1.concat([$2]);"]],genericCommandArgument:[["inlineExpression","$$ = $1;"],["literal","$$ = $1;"],["Identifier","$$ = new yy.TextNode($1);"]],jumpCommand:[["BeginCommand Jump Identifier EndCommand","$$ = new yy.JumpNode($3);"],["BeginCommand Jump inlineExpression EndCommand","$$ = new yy.JumpNode($3);"]],stopCommand:[["BeginCommand Stop EndCommand","$$ = new yy.StopNode();"]],assignmentCommand:[["BeginCommand setCommandInner EndCommand","$$ = $2;"],["BeginCommand declareCommandInner EndCommand","$$ = null"]],setCommandInner:[["Set Variable EqualToOrAssign expression","$$ = new yy.SetVariableEqualToNode($2.substring(1), $4);"]],declareCommandInner:[["Declare Variable EqualToOrAssign expression","$$ = null;yy.registerDeclaration($2.substring(1), $4)"],["Declare Variable EqualToOrAssign expression As ExplicitType","$$ = null;yy.registerDeclaration($2.substring(1), $4, $6)"]],expression:[["functionArgument","$$ = $1;"],["functionCall","$$ = $1"],["LeftParen expression RightParen","$$ = $2;"],["UnaryMinus expression","$$ = new yy.UnaryMinusExpressionNode($2);"],["expression Add expression","$$ = new yy.ArithmeticExpressionAddNode($1, $3);"],["expression Minus expression","$$ = new yy.ArithmeticExpressionMinusNode($1, $3);"],["expression Exponent expression","$$ = new yy.ArithmeticExpressionExponentNode($1, $3);"],["expression Multiply expression","$$ = new yy.ArithmeticExpressionMultiplyNode($1, $3);"],["expression Divide expression","$$ = new yy.ArithmeticExpressionDivideNode($1, $3);"],["expression Modulo expression","$$ = new yy.ArithmeticExpressionModuloNode($1, $3);"],["Not expression","$$ = new yy.NegatedBooleanExpressionNode($2);"],["expression Or expression","$$ = new yy.BooleanOrExpressionNode($1, $3);"],["expression And expression","$$ = new yy.BooleanAndExpressionNode($1, $3);"],["expression Xor expression","$$ = new yy.BooleanXorExpressionNode($1, $3);"],["expression EqualTo expression","$$ = new yy.EqualToExpressionNode($1, $3);"],["expression NotEqualTo expression","$$ = new yy.NotEqualToExpressionNode($1, $3);"],["expression GreaterThan expression","$$ = new yy.GreaterThanExpressionNode($1, $3);"],["expression GreaterThanOrEqualTo expression","$$ = new yy.GreaterThanOrEqualToExpressionNode($1, $3);"],["expression LessThan expression","$$ = new yy.LessThanExpressionNode($1, $3);"],["expression LessThanOrEqualTo expression","$$ = new yy.LessThanOrEqualToExpressionNode($1, $3);"]],functionCall:[["Identifier LeftParen RightParen","$$ = new yy.FunctionResultNode($1, []);"],["Identifier LeftParen parenExpressionArgs RightParen","$$ = new yy.FunctionResultNode($1, $3);"]],parenExpressionArgs:[["parenExpressionArgs Comma expression","$$ = $1.concat([$3]);"],["expression","$$ = [$1];"]],functionArgument:[["inlineExpression","$$ = $1;"],["literal","$$ = $1;"],["Variable","$$ = new yy.VariableNode($1.substring(1));"]],literal:[["True","$$ = new yy.BooleanLiteralNode($1);"],["False","$$ = new yy.BooleanLiteralNode($1);"],["Number","$$ = new yy.NumericLiteralNode($1);"],["String","$$ = new yy.StringLiteralNode($1);"],["Null","$$ = new yy.NullLiteralNode($1);"]],inlineExpression:[["BeginInlineExp expression EndInlineExp","$$ = new yy.InlineExpressionNode($2, @$);"]]}});T.lexer=new x,T.yy=u,T.yy.declarations={},T.yy.registerDeclaration=function(e,n,t){if(!this.areDeclarationsHandled){if(this.declarations[e])throw new Error(`Duplicate declaration found for variable: ${e}`);this.declarations[e]={variableName:e,expression:n,explicitType:t}}};var $=T;class m{}class E extends m{constructor(e,n=!0,t=[],s){super(),this.text=e,this.isAvailable=n,this.hashtags=t,this.metadata=s}}var y={Result:m,TextResult:class extends m{constructor(e,n,t){super(),this.text=e,this.hashtags=n,this.metadata=t}},CommandResult:class extends m{constructor(e,n,t,s){super(),this.name=e,this.args=n,this.hashtags=t,this.metadata=s}},OptionsResult:class extends m{constructor(e,n){super(),this.options=e.map((e=>new E(e.text,e.isAvailable,e.hashtags))),this.metadata=n}select(e=-1){if(e<0||e>=this.options.length)throw new Error(`Cannot select option #${e}, there are ${this.options.length} options`);this.selected=e}}};var f=class{constructor(){this.data={}}set(e,n){this.data[e]=n}get(e){return this.data[e]}};const g=u.types;var N={Runner:class{constructor(){this.yarnNodes={},this.variables=new f,this.functions={},this.visited={},this.registerFunction("visited",(e=>!!this.visited[e]))}load(e){let n=e;"string"==typeof e&&(n=function(e){const n=[],t=e.split(/\r?\n+/).filter((e=>!e.match(/^\s*$/)));let s,i=null,o=!1,a=0;for(;"#"===t[a][0]||!t[a].trim();)s||(s=[]),s.push(t[a].substr(1).trim()),a+=1;for(;a<t.length;a+=1)if("==="===t[a].trim())o=!1,s&&(i.filetags=s),n.push(i),i=null;else if(o)i.body+=`${t[a]}\n`;else if("---"===t[a].trim())o=!0,i.body="";else if(t[a].indexOf(":")>-1){const[e,n]=t[a].split(":"),s=e.trim(),o=n.trim();if("body"!==s){if(null==i&&(i={}),i[s])throw new Error(`Duplicate tag on node: ${s}`);i[s]=o}}return n}(e)),n.forEach((e=>{if(!e.title)throw new Error(`Node needs a title: ${JSON.stringify(e)}`);if(e.title.split(".").length>1)throw new Error(`Node title cannot contain a dot: ${e.title}`);if(!e.body)throw new Error(`Node needs a body: ${JSON.stringify(e)}`);if(this.yarnNodes[e.title])throw new Error(`Duplicate node title: ${e.title}`);this.yarnNodes[e.title]=e})),$.yy.areDeclarationsHandled=!1,$.yy.declarations={},this.handleDeclarations(n),$.yy.areDeclarationsHandled=!0}setVariableStorage(e){if("function"!=typeof e.set||"function"!=typeof e.get)throw new Error('Variable Storage object must contain both a "set" and "get" function');this.variables=e}handleDeclarations(e){const n={Number:0,String:"",Boolean:!1},t=e.reduce(((e,n)=>[...e,...n.body.split(/\r?\n+/)]),[]).reduce(((e,n)=>n.match(/^<<declare .+>>/)?[...e,n]:e),[]);t.length&&$.parse(t.join("\n")),Object.entries($.yy.declarations).forEach((([e,{expression:t,explicitType:s}])=>{const i=this.evaluateExpressionOrLiteral(t);if(s&&typeof i!=typeof n[s])throw new Error(`Cannot declare value ${i} as type ${s} for variable ${e}`);this.variables.get(e)||this.variables.set(e,i)}))}registerFunction(e,n){if("function"!=typeof n)throw new Error("Registered function must be...well...a function");this.functions[e]=n}*run(e){const n=this.yarnNodes[e];if(void 0===n)throw new Error(`Node "${e}" does not exist`);this.visited[e]=!0;const t=Array.from($.parse(n.body)),s={...n};return delete s.body,yield*this.evalNodes(t,s,!0)}*evalNodes(e,n,t){let s=[],i=null,o="";const a=e.filter(Boolean);for(let e=0;e<a.length;e+=1){const r=a[e],d=a[e+1];if(i instanceof g.Shortcut&&!(r instanceof g.Shortcut)){const e=yield*this.handleShortcuts(s,n);if(e&&e.stop)return e;s=[]}if(r instanceof g.Text||r instanceof g.Expression)o+=this.evaluateExpressionOrLiteral(r).toString(),d&&r.lineNum===d.lineNum&&(d instanceof g.Text||d instanceof g.Expression)||(yield new y.TextResult(o,r.hashtags,n),o="");else if(r instanceof g.Shortcut)s.push(r);else if(r instanceof g.Assignment)this.evaluateAssignment(r);else if(r instanceof g.Conditional){const e=this.evaluateConditional(r);if(e){const t=yield*this.evalNodes(e,n);if(t&&t.stop)return t}}else{if("JumpNode"===r.type)return yield*this.run(r.destination),t?void 0:{stop:!0};if("StopNode"===r.type)return t?void 0:{stop:!0};const e=r.args.map(this.evaluateExpressionOrLiteral,this);yield new y.CommandResult(r.functionName,e,r.hashtags,n)}i=r}if(s.length>0)return yield*this.handleShortcuts(s,n)}*handleShortcuts(e,n){const t=e.map((e=>{let n=!0,t="";return e.conditionalExpression&&!this.evaluateExpressionOrLiteral(e.conditionalExpression)&&(n=!1),t=e.text.reduce(((e,n)=>e+this.evaluateExpressionOrLiteral(n).toString()),""),Object.assign(e,{isAvailable:n,text:t})})),s=new y.OptionsResult(t,n);if(yield s,"number"!=typeof s.selected)throw new Error("No option selected before resuming dialogue");{const e=t[s.selected];if(e.content)return yield*this.evalNodes(e.content,n)}}evaluateAssignment(e){const n=this.evaluateExpressionOrLiteral(e.expression),t=this.variables.get(e.variableName);if(t&&typeof t!=typeof n)throw new Error(`Variable ${e.variableName} is already type ${typeof t}; cannot set equal to ${n} of type ${typeof n}`);this.variables.set(e.variableName,n)}evaluateConditional(e){if("IfNode"===e.type){if(this.evaluateExpressionOrLiteral(e.expression))return e.statement}else{if("IfElseNode"!==e.type&&"ElseIfNode"!==e.type)return e.statement;if(this.evaluateExpressionOrLiteral(e.expression))return e.statement;if(e.elseStatement)return this.evaluateConditional(e.elseStatement)}return null}evaluateFunctionCall(e){if(this.functions[e.functionName])return this.functions[e.functionName](...e.args.map(this.evaluateExpressionOrLiteral,this));throw new Error(`Function "${e.functionName}" not found`)}evaluateExpressionOrLiteral(e){const n={UnaryMinusExpressionNode:e=>-e,ArithmeticExpressionAddNode:(e,n)=>e+n,ArithmeticExpressionMinusNode:(e,n)=>e-n,ArithmeticExpressionExponentNode:(e,n)=>e**n,ArithmeticExpressionMultiplyNode:(e,n)=>e*n,ArithmeticExpressionDivideNode:(e,n)=>e/n,ArithmeticExpressionModuloNode:(e,n)=>e%n,NegatedBooleanExpressionNode:e=>!e,BooleanOrExpressionNode:(e,n)=>e||n,BooleanAndExpressionNode:(e,n)=>e&&n,BooleanXorExpressionNode:(e,n)=>!!(e^n),EqualToExpressionNode:(e,n)=>e===n,NotEqualToExpressionNode:(e,n)=>e!==n,GreaterThanExpressionNode:(e,n)=>e>n,GreaterThanOrEqualToExpressionNode:(e,n)=>e>=n,LessThanExpressionNode:(e,n)=>e<n,LessThanOrEqualToExpressionNode:(e,n)=>e<=n,TextNode:e=>e.text,NumericLiteralNode:e=>parseFloat(e.numericLiteral),StringLiteralNode:e=>`${e.stringLiteral}`,BooleanLiteralNode:e=>"true"===e.booleanLiteral,VariableNode:e=>this.variables.get(e.variableName),FunctionResultNode:e=>this.evaluateFunctionCall(e),InlineExpressionNode:e=>e}[e.type];if(!n)throw new Error(`node type not recognized: ${e.type}`);return n(e instanceof g.Expression?this.evaluateExpressionOrLiteral(e.expression||e.expression1):e,e.expression2?this.evaluateExpressionOrLiteral(e.expression2):e)}},TextResult:y.TextResult,CommandResult:y.CommandResult,OptionsResult:y.OptionsResult};return N}));
