(()=>{var e={495:e=>{e.exports=function(e){const t=[],n=e.split(/\r?\n+/).filter((e=>!e.match(/^\s*$/)));let s,i=null,a=!1,r=0;for(;"#"===n[r][0]||!n[r].trim();)s||(s=[]),s.push(n[r].substr(1).trim()),r+=1;for(;r<n.length;r+=1)if("==="===n[r].trim())a=!1,s&&(i.filetags=s),t.push(i),i=null;else if(a)i.body+=`${n[r]}\n`;else if("---"===n[r].trim())a=!0,i.body="";else if(n[r].indexOf(":")>-1){const[e,t]=n[r].split(":"),s=e.trim(),a=t.trim();if("body"!==s){if(null==i&&(i={}),i[s])throw new Error(`Duplicate tag on node: ${s}`);i[s]=a}}return t}},271:e=>{"use strict";e.exports=class{constructor(){this.data={}}set(e,t){this.data[e]=t}get(e){return this.data[e]}}}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";class e{}class t{}class s{}class i{}class a{}class r{}class o{}const d={types:{Text:e,Shortcut:t,Conditional:s,Assignment:i,Literal:a,Expression:r,FunctionCall:o},DialogShortcutNode:class extends t{constructor(e,t,n,s=[],i){super(),this.type="DialogShortcutNode",this.text=e,this.content=t,this.lineNum=n.first_line,this.hashtags=s,this.conditionalExpression=i}},IfNode:class extends s{constructor(e,t){super(),this.type="IfNode",this.expression=e,this.statement=t}},IfElseNode:class extends s{constructor(e,t,n){super(),this.type="IfElseNode",this.expression=e,this.statement=t,this.elseStatement=n}},ElseNode:class extends s{constructor(e){super(),this.type="ElseNode",this.statement=e}},ElseIfNode:class extends s{constructor(e,t,n){super(),this.type="ElseIfNode",this.expression=e,this.statement=t,this.elseStatement=n}},TextNode:class extends e{constructor(e,t,n=[]){super(),this.type="TextNode",this.text=e,this.lineNum=t?t.first_line:-1,this.hashtags=n}},NumericLiteralNode:class extends a{constructor(e){super(),this.type="NumericLiteralNode",this.numericLiteral=e}},StringLiteralNode:class extends a{constructor(e){super(),this.type="StringLiteralNode",this.stringLiteral=e}},BooleanLiteralNode:class extends a{constructor(e){super(),this.type="BooleanLiteralNode",this.booleanLiteral=e}},VariableNode:class extends a{constructor(e){super(),this.type="VariableNode",this.variableName=e}},UnaryMinusExpressionNode:class extends r{constructor(e){super(),this.type="UnaryMinusExpressionNode",this.expression=e}},ArithmeticExpressionAddNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionAddNode",this.expression1=e,this.expression2=t}},ArithmeticExpressionMinusNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionMinusNode",this.expression1=e,this.expression2=t}},ArithmeticExpressionMultiplyNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionMultiplyNode",this.expression1=e,this.expression2=t}},ArithmeticExpressionExponentNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionExponentNode",this.expression1=e,this.expression2=t}},ArithmeticExpressionDivideNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionDivideNode",this.expression1=e,this.expression2=t}},ArithmeticExpressionModuloNode:class extends r{constructor(e,t){super(),this.type="ArithmeticExpressionModuloNode",this.expression1=e,this.expression2=t}},NegatedBooleanExpressionNode:class extends r{constructor(e){super(),this.type="NegatedBooleanExpressionNode",this.expression=e}},BooleanOrExpressionNode:class extends r{constructor(e,t){super(),this.type="BooleanOrExpressionNode",this.expression1=e,this.expression2=t}},BooleanAndExpressionNode:class extends r{constructor(e,t){super(),this.type="BooleanAndExpressionNode",this.expression1=e,this.expression2=t}},BooleanXorExpressionNode:class extends r{constructor(e,t){super(),this.type="BooleanXorExpressionNode",this.expression1=e,this.expression2=t}},EqualToExpressionNode:class extends r{constructor(e,t){super(),this.type="EqualToExpressionNode",this.expression1=e,this.expression2=t}},NotEqualToExpressionNode:class extends r{constructor(e,t){super(),this.type="NotEqualToExpressionNode",this.expression1=e,this.expression2=t}},GreaterThanExpressionNode:class extends r{constructor(e,t){super(),this.type="GreaterThanExpressionNode",this.expression1=e,this.expression2=t}},GreaterThanOrEqualToExpressionNode:class extends r{constructor(e,t){super(),this.type="GreaterThanOrEqualToExpressionNode",this.expression1=e,this.expression2=t}},LessThanExpressionNode:class extends r{constructor(e,t){super(),this.type="LessThanExpressionNode",this.expression1=e,this.expression2=t}},LessThanOrEqualToExpressionNode:class extends r{constructor(e,t){super(),this.type="LessThanOrEqualToExpressionNode",this.expression1=e,this.expression2=t}},SetVariableEqualToNode:class extends i{constructor(e,t){super(),this.type="SetVariableEqualToNode",this.variableName=e,this.expression=t}},FunctionResultNode:class extends o{constructor(e,t,n,s=[]){super(),this.type="FunctionResultNode",this.functionName=e,this.args=t,this.lineNum=n?n.first_line:-1,this.hashtags=s}},JumpNode:class extends o{constructor(e){super(),this.type="JumpNode",this.destination=e}},StopNode:class extends o{constructor(){super(),this.type="StopNode"}},InlineExpressionNode:class extends r{constructor(e,t,n=[]){super(),this.type="InlineExpressionNode",this.expression=e,this.lineNum=t.first_line,this.hashtags=n}}},l={Whitespace:null,Indent:null,Dedent:null,EndOfLine:/\n/,EndOfInput:null,Number:/-?[0-9]+(\.[0-9+])?/,String:/"([^"\\]*(?:\\.[^"\\]*)*)"/,BeginCommand:/<</,EndCommand:/>>/,Variable:/\$([A-Za-z0-9_.])+/,ShortcutOption:/->/,Hashtag:/#([^(\s|#|//)]+)/,Comment:/\/\/.*/,OptionStart:/\[\[/,OptionDelimit:/\|/,OptionEnd:/\]\]/,If:/if(?!\w)/,ElseIf:/elseif(?!\w)/,Else:/else(?!\w)/,EndIf:/endif(?!\w)/,Jump:/jump(?!\w)/,Stop:/stop(?!\w)/,Set:/set(?!\w)/,Declare:/declare(?!\w)/,As:/as(?!\w)/,ExplicitType:/(String|Number|Bool)(?=>>)/,True:/true(?!\w)/,False:/false(?!\w)/,Null:/null(?!\w)/,LeftParen:/\(/,RightParen:/\)/,Comma:/,/,UnaryMinus:/-(?!\s)/,EqualTo:/(==|is(?!\w)|eq(?!\w))/,GreaterThan:/(>|gt(?!\w))/,GreaterThanOrEqualTo:/(>=|gte(?!\w))/,LessThan:/(<|lt(?!\w))/,LessThanOrEqualTo:/(<=|lte(?!\w))/,NotEqualTo:/(!=|neq(?!\w))/,Or:/(\|\||or(?!\w))/,And:/(&&|and(?!\w))/,Xor:/(\^|xor(?!\w))/,Not:/(!|not(?!\w))/,EqualToOrAssign:/(=|to(?!\w))/,Add:/\+/,Minus:/-/,Exponent:/\*\*/,Multiply:/\*/,Divide:/\//,Modulo:/%/,AddAssign:/\+=/,MinusAssign:/-=/,MultiplyAssign:/\*=/,DivideAssign:/\/=/,Identifier:/[a-zA-Z0-9_:.]+/,EscapedCharacter:/\\./,Text:/[^\\]/,BeginInlineExp:/{/,EndInlineExp:/}/},h=class{constructor(){this.transitions=[],this.textRule=null,this.isTrackingNextIndentation=!1,this.isEmittingEndOfLineTokens=!1}addTransition(e,t,n){return this.transitions.push({token:e,regex:l[e],state:t||null,delimitsText:n||!1}),this}addTextRule(e,t){if(this.textRule)throw new Error("Cannot add more than one text rule to a state.");const n=[];this.transitions.forEach((e=>{e.delimitsText&&n.push(`(${e.regex.source})`)}));const s=`((?!${n.join("|")}).)+`;return this.addTransition(e,t),this.textRule=this.transitions[this.transitions.length-1],this.textRule.regex=new RegExp(s),this}setTrackNextIndentation(e){return this.isTrackingNextIndentation=e,this}},c=function(){return{base:(new h).addTransition("EscapedCharacter",null,!0).addTransition("Comment",null,!0).addTransition("Hashtag",null,!0).addTransition("BeginCommand","command",!0).addTransition("BeginInlineExp","inlineExpression",!0).addTransition("ShortcutOption","shortcutOption").addTextRule("Text"),shortcutOption:(new h).setTrackNextIndentation(!0).addTransition("EscapedCharacter",null,!0).addTransition("Comment",null,!0).addTransition("Hashtag",null,!0).addTransition("BeginCommand","expression",!0).addTransition("BeginInlineExp","inlineExpressionInShortcut",!0).addTextRule("Text","base"),command:(new h).addTransition("If","expression").addTransition("Else").addTransition("ElseIf","expression").addTransition("EndIf").addTransition("Set","assignment").addTransition("Declare","declare").addTransition("Jump","jump").addTransition("Stop","stop").addTransition("EndCommand","base",!0).addTransition("Identifier","commandArg",!0).addTextRule("Text"),commandArg:(new h).addTransition("BeginInlineExp","inlineExpressionInCommand",!0).addTransition("EndCommand","base",!0).addTransition("LeftParen","commandParenArgOrExpression").addTransition("Variable").addTransition("Number").addTransition("String").addTransition("True").addTransition("False").addTransition("Identifier").addTransition("Comma").addTransition("RightParen"),commandParenArgOrExpression:(new h).addTransition("EndCommand","base",!0).addTransition("LeftParen","expression").addTransition("Variable","expression").addTransition("Number","expression").addTransition("String").addTransition("True").addTransition("False").addTransition("Null").addTransition("RightParen"),assignment:(new h).addTransition("Variable").addTransition("EqualToOrAssign","expression"),declare:(new h).addTransition("Variable").addTransition("EndCommand","base").addTransition("EqualToOrAssign","expression"),jump:(new h).addTransition("Identifier").addTransition("BeginInlineExp","inlineExpressionInCommand",!0).addTransition("EndCommand","base",!0),stop:(new h).addTransition("EndCommand","base",!0),expression:(new h).addTransition("As").addTransition("ExplicitType").addTransition("EndCommand","base").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule(),inlineExpression:(new h).addTransition("EndInlineExp","base").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base"),inlineExpressionInCommand:(new h).addTransition("EndInlineExp","commandArg").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base"),inlineExpressionInShortcut:(new h).addTransition("EndInlineExp","shortcutOption").addTransition("Number").addTransition("String").addTransition("LeftParen").addTransition("RightParen").addTransition("EqualTo").addTransition("EqualToOrAssign").addTransition("NotEqualTo").addTransition("GreaterThanOrEqualTo").addTransition("GreaterThan").addTransition("LessThanOrEqualTo").addTransition("LessThan").addTransition("Add").addTransition("UnaryMinus").addTransition("Minus").addTransition("Exponent").addTransition("Multiply").addTransition("Divide").addTransition("Modulo").addTransition("And").addTransition("Or").addTransition("Xor").addTransition("Not").addTransition("Variable").addTransition("Comma").addTransition("True").addTransition("False").addTransition("Null").addTransition("Identifier").addTextRule("Text","base")}};var u=function(e,t,n,s){for(n=n||{},s=e.length;s--;n[e[s]]=t);return n},p=[1,19],T=[1,20],x=[1,12],E=[1,18],m=[1,17],y=[5,18,19,24,35,37,80],g=[1,24],N=[1,25],f=[1,27],b=[1,28],w=[5,14,16,22,24,35,37],I=[5,14,16,18,19,22,24,35,37,80],k=[1,31],O=[1,32],$=[1,35],A=[1,36],L=[1,37],C=[1,38],_=[5,14,16,18,22,24,35,37,80],q=[1,42],v=[1,52],S=[1,51],M=[1,46],R=[1,47],D=[1,48],B=[1,53],P=[1,54],G=[1,55],V=[1,56],F=[1,57],j=[5,16,18,19,24,35,37,80],U=[1,68],X=[1,79],J=[1,80],H=[1,81],z=[1,82],Z=[1,83],W=[1,84],K=[1,85],Q=[1,86],Y=[1,87],ee=[1,88],te=[1,89],ne=[1,90],se=[1,91],ie=[1,92],ae=[1,93],re=[27,50,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,74,81],oe=[27,38,50,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81],de=[27,38,75,76,77,78,79,80],le=[27,50,55,57,58,59,60,61,64,65,66,67,68,69,70,71,72,74,81],he=[27,50,55,74,81],ce=[1,132],ue=[1,133],pe=[27,50,55,57,58,64,65,66,67,68,69,70,71,72,74,81],Te=[27,50,55,64,65,66,67,68,69,70,71,72,74,81],xe=[55,74],Ee=[16,18,19,24,35,80],me={trace:function(){},yy:{},symbols_:{error:2,node:3,statements:4,EndOfInput:5,conditionalBlock:6,statement:7,text:8,shortcut:9,genericCommand:10,assignmentCommand:11,jumpCommand:12,stopCommand:13,Comment:14,hashtags:15,EndOfLine:16,escapedTextRaw:17,Text:18,EscapedCharacter:19,escapedText:20,inlineExpression:21,Hashtag:22,conditional:23,BeginCommand:24,If:25,expression:26,EndCommand:27,EndIf:28,additionalConditionalBlocks:29,else:30,Else:31,elseif:32,ElseIf:33,shortcutOption:34,ShortcutOption:35,Indent:36,Dedent:37,Identifier:38,genericCommandArguments:39,genericCommandArgument:40,literal:41,Jump:42,Stop:43,setCommandInner:44,declareCommandInner:45,Set:46,Variable:47,EqualToOrAssign:48,Declare:49,As:50,ExplicitType:51,functionArgument:52,functionCall:53,LeftParen:54,RightParen:55,UnaryMinus:56,Add:57,Minus:58,Exponent:59,Multiply:60,Divide:61,Modulo:62,Not:63,Or:64,And:65,Xor:66,EqualTo:67,NotEqualTo:68,GreaterThan:69,GreaterThanOrEqualTo:70,LessThan:71,LessThanOrEqualTo:72,parenExpressionArgs:73,Comma:74,True:75,False:76,Number:77,String:78,Null:79,BeginInlineExp:80,EndInlineExp:81,$accept:0,$end:1},terminals_:{2:"error",5:"EndOfInput",14:"Comment",16:"EndOfLine",18:"Text",19:"EscapedCharacter",22:"Hashtag",24:"BeginCommand",25:"If",27:"EndCommand",28:"EndIf",31:"Else",33:"ElseIf",35:"ShortcutOption",36:"Indent",37:"Dedent",38:"Identifier",42:"Jump",43:"Stop",46:"Set",47:"Variable",48:"EqualToOrAssign",49:"Declare",50:"As",51:"ExplicitType",54:"LeftParen",55:"RightParen",56:"UnaryMinus",57:"Add",58:"Minus",59:"Exponent",60:"Multiply",61:"Divide",62:"Modulo",63:"Not",64:"Or",65:"And",66:"Xor",67:"EqualTo",68:"NotEqualTo",69:"GreaterThan",70:"GreaterThanOrEqualTo",71:"LessThan",72:"LessThanOrEqualTo",74:"Comma",75:"True",76:"False",77:"Number",78:"String",79:"Null",80:"BeginInlineExp",81:"EndInlineExp"},productions_:[0,[3,2],[4,1],[4,2],[4,1],[4,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[17,1],[17,1],[17,2],[17,2],[20,1],[8,1],[8,1],[8,2],[15,1],[15,2],[23,4],[6,6],[6,4],[6,2],[30,3],[30,2],[32,4],[32,2],[29,5],[29,5],[29,3],[34,2],[34,3],[34,2],[34,2],[34,3],[34,2],[9,1],[9,5],[10,3],[10,4],[39,1],[39,2],[40,1],[40,1],[40,1],[12,4],[12,4],[13,3],[11,3],[11,3],[44,4],[45,4],[45,6],[26,1],[26,1],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[53,3],[53,4],[73,3],[73,1],[52,1],[52,1],[52,1],[41,1],[41,1],[41,1],[41,1],[41,1],[21,3]],performAction:function(e,t,n,s,i,a,r){var o=a.length-1;switch(i){case 1:return a[o-1].flat();case 2:case 4:case 7:case 8:case 9:case 10:case 11:case 21:case 46:case 82:case 20:this.$=[a[o]];break;case 3:case 22:this.$=a[o-1].concat(a[o]);break;case 5:case 47:this.$=a[o-1].concat([a[o]]);break;case 6:case 60:case 15:case 48:case 49:case 59:case 83:case 84:this.$=a[o];break;case 12:case 14:case 28:case 31:case 32:case 54:case 61:case 25:case 39:case 41:this.$=a[o-1];break;case 13:this.$=a[o-1].map((e=>Object.assign(e,{hashtags:a[o]})));break;case 16:this.$=a[o].substring(1);break;case 17:this.$=a[o-1].concat(a[o].substring(1));break;case 18:this.$=a[o-1].substring(1).concat(a[o]);break;case 19:this.$=new s.TextNode(a[o],this._$);break;case 23:this.$=[a[o].substring(1)];break;case 24:this.$=[a[o-1].substring(1)].concat(a[o]);break;case 26:this.$=new s.IfNode(a[o-5],a[o-3].flat());break;case 27:this.$=new s.IfElseNode(a[o-3],a[o-1].flat(),a[o]);break;case 29:case 30:this.$=void 0;break;case 33:this.$=new s.ElseNode(a[o-3].flat());break;case 34:this.$=new s.ElseIfNode(a[o-4],a[o-3].flat());break;case 35:this.$=new s.ElseIfNode(a[o-2],a[o-1].flat(),a[o]);break;case 36:this.$={text:a[o]};break;case 37:this.$={text:a[o-1],conditional:a[o]};break;case 38:this.$={...a[o-1],hashtags:a[o]};break;case 40:this.$={...a[o-2],hashtags:a[o-1]};break;case 42:this.$=new s.DialogShortcutNode(a[o].text,void 0,this._$,a[o].hashtags,a[o].conditional);break;case 43:this.$=new s.DialogShortcutNode(a[o-4].text,a[o-1].flat(),this._$,a[o-4].hashtags,a[o-4].conditional);break;case 44:this.$=new s.FunctionResultNode(a[o-1],[],this._$);break;case 45:this.$=new s.FunctionResultNode(a[o-2],a[o-1],this._$);break;case 50:this.$=new s.TextNode(a[o]);break;case 51:case 52:this.$=new s.JumpNode(a[o-1]);break;case 53:this.$=new s.StopNode;break;case 55:this.$=null;break;case 56:this.$=new s.SetVariableEqualToNode(a[o-2].substring(1),a[o]);break;case 57:this.$=null,s.registerDeclaration(a[o-2].substring(1),a[o]);break;case 58:this.$=null,s.registerDeclaration(a[o-4].substring(1),a[o-2],a[o]);break;case 62:this.$=new s.UnaryMinusExpressionNode(a[o]);break;case 63:this.$=new s.ArithmeticExpressionAddNode(a[o-2],a[o]);break;case 64:this.$=new s.ArithmeticExpressionMinusNode(a[o-2],a[o]);break;case 65:this.$=new s.ArithmeticExpressionExponentNode(a[o-2],a[o]);break;case 66:this.$=new s.ArithmeticExpressionMultiplyNode(a[o-2],a[o]);break;case 67:this.$=new s.ArithmeticExpressionDivideNode(a[o-2],a[o]);break;case 68:this.$=new s.ArithmeticExpressionModuloNode(a[o-2],a[o]);break;case 69:this.$=new s.NegatedBooleanExpressionNode(a[o]);break;case 70:this.$=new s.BooleanOrExpressionNode(a[o-2],a[o]);break;case 71:this.$=new s.BooleanAndExpressionNode(a[o-2],a[o]);break;case 72:this.$=new s.BooleanXorExpressionNode(a[o-2],a[o]);break;case 73:this.$=new s.EqualToExpressionNode(a[o-2],a[o]);break;case 74:this.$=new s.NotEqualToExpressionNode(a[o-2],a[o]);break;case 75:this.$=new s.GreaterThanExpressionNode(a[o-2],a[o]);break;case 76:this.$=new s.GreaterThanOrEqualToExpressionNode(a[o-2],a[o]);break;case 77:this.$=new s.LessThanExpressionNode(a[o-2],a[o]);break;case 78:this.$=new s.LessThanOrEqualToExpressionNode(a[o-2],a[o]);break;case 79:this.$=new s.FunctionResultNode(a[o-2],[]);break;case 80:this.$=new s.FunctionResultNode(a[o-3],a[o-1]);break;case 81:this.$=a[o-2].concat([a[o]]);break;case 85:this.$=new s.VariableNode(a[o].substring(1));break;case 86:case 87:this.$=new s.BooleanLiteralNode(a[o]);break;case 88:this.$=new s.NumericLiteralNode(a[o]);break;case 89:this.$=new s.StringLiteralNode(a[o]);break;case 90:this.$=new s.NullLiteralNode(a[o]);break;case 91:this.$=new s.InlineExpressionNode(a[o-1],this._$)}},table:[{3:1,4:2,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},{1:[3]},{5:[1,21],6:22,7:23,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},u(y,[2,2],{16:g}),u(y,[2,4],{15:26,14:N,16:f,22:b}),{16:[1,29]},u(w,[2,6],{20:13,21:14,17:16,8:30,18:p,19:T,80:m}),u(I,[2,7]),u(I,[2,8]),u(I,[2,9]),u(I,[2,10]),u(I,[2,11]),{25:k,38:O,42:$,43:A,44:33,45:34,46:L,49:C},u(I,[2,20]),u(I,[2,21]),u(y,[2,42],{15:40,14:[1,41],16:[1,39],22:b}),u(_,[2,19],{19:q}),{21:49,26:43,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{8:58,17:16,18:p,19:T,20:13,21:14,80:m},u(I,[2,15]),u([5,14,16,22,24,35,37,80],[2,16],{17:59,18:p,19:T}),{1:[2,1]},u(y,[2,3],{16:g}),u(y,[2,5],{15:26,14:N,16:f,22:b}),u(j,[2,28]),u(I,[2,12]),u(I,[2,13]),u(I,[2,14]),u([5,14,16,18,19,24,35,37,80],[2,23],{15:60,22:b}),{4:61,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},u(w,[2,22],{20:13,21:14,17:16,8:30,18:p,19:T,80:m}),{21:49,26:62,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:66,27:[1,63],38:U,39:64,40:65,41:67,75:B,76:P,77:G,78:V,79:F,80:m},{27:[1,69]},{27:[1,70]},{21:72,38:[1,71],80:m},{27:[1,73]},{47:[1,74]},{47:[1,75]},u(I,[2,41],{36:[1,76]}),u([5,16,18,19,22,24,35,37,80],[2,38],{14:[1,77]}),u(I,[2,39]),u(I,[2,17]),{57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae,81:[1,78]},u(re,[2,59]),u(re,[2,60]),{21:49,26:94,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:95,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:96,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},u(re,[2,83]),u(re,[2,84]),u(re,[2,85]),{54:[1,97]},u(oe,[2,86]),u(oe,[2,87]),u(oe,[2,88]),u(oe,[2,89]),u(oe,[2,90]),u([5,14,16,22,35,37],[2,36],{20:13,21:14,17:16,8:30,23:98,18:p,19:T,24:[1,99],80:m}),u(_,[2,18],{19:q}),u(I,[2,24]),{6:22,7:23,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:[1,100],29:101,30:102,32:103,34:15,35:E,80:m},{27:[1,104],57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae},u(I,[2,44]),{21:66,27:[1,105],38:U,40:106,41:67,75:B,76:P,77:G,78:V,79:F,80:m},u(de,[2,46]),u(de,[2,48]),u(de,[2,49]),u(de,[2,50]),u(I,[2,54]),u(I,[2,55]),{27:[1,107]},{27:[1,108]},u(I,[2,53]),{48:[1,109]},{48:[1,110]},{4:111,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},u(I,[2,40]),u([5,14,16,18,19,22,24,27,35,37,38,50,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81],[2,91]),{21:49,26:112,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:113,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:114,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:115,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:116,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:117,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:118,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:119,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:120,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:121,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:122,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:123,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:124,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:125,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:126,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{55:[1,127],57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae},u(le,[2,62],{62:W}),u(he,[2,69],{57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),{21:49,26:130,38:v,41:50,47:S,52:44,53:45,54:M,55:[1,128],56:R,63:D,73:129,75:B,76:P,77:G,78:V,79:F,80:m},u(I,[2,37]),{25:k},{25:k,28:[1,131],31:ce,33:ue,38:O,42:$,43:A,44:33,45:34,46:L,49:C},u(j,[2,27]),{4:134,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,16:[1,135],17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},{4:136,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,16:[1,137],17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,80:m},u(I,[2,25]),u(I,[2,45]),u(de,[2,47]),u(I,[2,51]),u(I,[2,52]),{21:49,26:138,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{21:49,26:139,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{6:22,7:23,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:x,34:15,35:E,37:[1,140],80:m},u(pe,[2,63],{59:H,60:z,61:Z,62:W}),u(pe,[2,64],{59:H,60:z,61:Z,62:W}),u(le,[2,65],{62:W}),u(le,[2,66],{62:W}),u(le,[2,67],{62:W}),u(he,[2,68],{57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),u([27,50,55,64,74,81],[2,70],{57:X,58:J,59:H,60:z,61:Z,62:W,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),u([27,50,55,64,65,74,81],[2,71],{57:X,58:J,59:H,60:z,61:Z,62:W,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),u([27,50,55,64,65,66,74,81],[2,72],{57:X,58:J,59:H,60:z,61:Z,62:W,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),u(Te,[2,73],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(Te,[2,74],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(Te,[2,75],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(Te,[2,76],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(Te,[2,77],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(Te,[2,78],{57:X,58:J,59:H,60:z,61:Z,62:W}),u(re,[2,61]),u(re,[2,79]),{55:[1,141],74:[1,142]},u(xe,[2,82],{57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),{27:[1,143]},{27:[1,144]},{21:49,26:145,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},{6:22,7:23,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:[1,146],34:15,35:E,80:m},u(Ee,[2,30]),{6:22,7:23,8:6,9:7,10:8,11:9,12:10,13:11,17:16,18:p,19:T,20:13,21:14,23:5,24:[1,147],29:148,30:102,32:103,34:15,35:E,80:m},u(Ee,[2,32]),{27:[2,56],57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae},{27:[2,57],50:[1,149],57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae},u(I,[2,43]),u(re,[2,80]),{21:49,26:150,38:v,41:50,47:S,52:44,53:45,54:M,56:R,63:D,75:B,76:P,77:G,78:V,79:F,80:m},u(j,[2,26]),u(Ee,[2,29]),{27:[1,151],57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae},{25:k,28:[1,152],38:O,42:$,43:A,44:33,45:34,46:L,49:C},{25:k,28:[1,153],31:ce,33:ue,38:O,42:$,43:A,44:33,45:34,46:L,49:C},u(j,[2,35]),{51:[1,154]},u(xe,[2,81],{57:X,58:J,59:H,60:z,61:Z,62:W,64:K,65:Q,66:Y,67:ee,68:te,69:ne,70:se,71:ie,72:ae}),u(Ee,[2,31]),{27:[1,155]},{27:[1,156]},{27:[2,58]},u(j,[2,33]),u(j,[2,34])],defaultActions:{21:[2,1],154:[2,58]},parseError:function(e,t){if(!t.recoverable){var n=new Error(e);throw n.hash=t,n}this.trace(e)},parse:function(e){var t=this,n=[0],s=[null],i=[],a=this.table,r="",o=0,d=0,l=0,h=2,c=1,u=i.slice.call(arguments,1),p=Object.create(this.lexer),T={yy:{}};for(var x in this.yy)Object.prototype.hasOwnProperty.call(this.yy,x)&&(T.yy[x]=this.yy[x]);p.setInput(e,T.yy),T.yy.lexer=p,T.yy.parser=this,void 0===p.yylloc&&(p.yylloc={});var E=p.yylloc;i.push(E);var m=p.options&&p.options.ranges;"function"==typeof T.yy.parseError?this.parseError=T.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var y,g,N,f,b,w,I,k,O,$=function(){var e;return"number"!=typeof(e=p.lex()||c)&&(e=t.symbols_[e]||e),e},A={};;){if(N=n[n.length-1],this.defaultActions[N]?f=this.defaultActions[N]:(null==y&&(y=$()),f=a[N]&&a[N][y]),void 0===f||!f.length||!f[0]){var L="";for(w in O=[],a[N])this.terminals_[w]&&w>h&&O.push("'"+this.terminals_[w]+"'");L=p.showPosition?"Parse error on line "+(o+1)+":\n"+p.showPosition()+"\nExpecting "+O.join(", ")+", got '"+(this.terminals_[y]||y)+"'":"Parse error on line "+(o+1)+": Unexpected "+(y==c?"end of input":"'"+(this.terminals_[y]||y)+"'"),this.parseError(L,{text:p.match,token:this.terminals_[y]||y,line:p.yylineno,loc:E,expected:O})}if(f[0]instanceof Array&&f.length>1)throw new Error("Parse Error: multiple actions possible at state: "+N+", token: "+y);switch(f[0]){case 1:n.push(y),s.push(p.yytext),i.push(p.yylloc),n.push(f[1]),y=null,g?(y=g,g=null):(d=p.yyleng,r=p.yytext,o=p.yylineno,E=p.yylloc,l>0&&l--);break;case 2:if(I=this.productions_[f[1]][1],A.$=s[s.length-I],A._$={first_line:i[i.length-(I||1)].first_line,last_line:i[i.length-1].last_line,first_column:i[i.length-(I||1)].first_column,last_column:i[i.length-1].last_column},m&&(A._$.range=[i[i.length-(I||1)].range[0],i[i.length-1].range[1]]),void 0!==(b=this.performAction.apply(A,[r,d,o,T.yy,f[1],s,i].concat(u))))return b;I&&(n=n.slice(0,-1*I*2),s=s.slice(0,-1*I),i=i.slice(0,-1*I)),n.push(this.productions_[f[1]][0]),s.push(A.$),i.push(A._$),k=a[n[n.length-2]][n[n.length-1]],n.push(k);break;case 3:return!0}}return!0}};function ye(){this.yy={}}ye.prototype=me,me.Parser=ye,me.lexer=new class{constructor(){this.states=c(),this.state="base",this.originalText="",this.lines=[],this.indentation=[[0,!1]],this.shouldTrackNextIndentation=!1,this.previousLevelOfIndentation=0,this.reset()}reset(){this.yytext="",this.yylloc={first_column:1,first_line:1,last_column:1,last_line:1},this.yylineno=1}lex(){if(this.isAtTheEndOfText()){this.yytext="";const e=this.indentation.pop();return e&&e[1]?"Dedent":"EndOfInput"}return this.isAtTheEndOfLine()?(this.advanceLine(),"EndOfLine"):this.lexNextTokenOnCurrentLine()}advanceLine(){this.yylineno+=1;const e=this.getCurrentLine().replace(/\t/,"    ");this.lines[this.yylineno-1]=e,this.previousLevelOfIndentation=this.getLastRecordedIndentation()[0],this.yytext="",this.yylloc={first_column:1,first_line:this.yylineno,last_column:1,last_line:this.yylineno}}lexNextTokenOnCurrentLine(){const e=this.getCurrentLineIndentation();if(this.shouldTrackNextIndentation&&e>this.previousLevelOfIndentation)return this.indentation.push([e,!0]),this.shouldTrackNextIndentation=!1,this.yylloc.first_column=this.yylloc.last_column,this.yylloc.last_column+=e,this.yytext="","Indent";if(e<this.getLastRecordedIndentation()[0]){if(this.indentation.pop()[1])return this.yytext="",this.previousLevelOfIndentation=this.getLastRecordedIndentation()[0],"Dedent";this.lexNextTokenOnCurrentLine()}e===this.previousLevelOfIndentation&&1===this.yylloc.last_column&&(this.yylloc.last_column+=e);const t=this.getState().transitions;for(let n=0,s=t.length;n<s;n+=1){const s=t[n],i=this.getCurrentLine().substring(this.yylloc.last_column-1).match(s.regex);if(null!==i&&0===i.index){const t=i[0];this.yytext=this.getCurrentLine().substr(this.yylloc.last_column-1,t.length),"String"===s.token&&(this.yytext=this.yytext.substring(1,this.yytext.length-1).replace(/\\/g,"")),this.yylloc.first_column=this.yylloc.last_column,this.yylloc.last_column+=t.length,s.state&&(this.setState(s.state),this.shouldTrackNextIndentation&&this.getLastRecordedIndentation()[0]<e&&this.indentation.push([e,!1]));const n=this.states[s.state],a=!n||n.transitions.find((e=>"Text"===e.token));if("EndInlineExp"!==s.token&&"EscapedCharacter"!==s.token||!a){const e=this.getCurrentLine().substring(this.yylloc.last_column-1).match(/^\s*/);e[0]&&(this.yylloc.last_column+=e[0].length)}return s.token}}throw new Error(`Invalid syntax in: ${this.getCurrentLine()}`)}setState(e){if(void 0===this.states[e])throw new Error(`Cannot set the unknown state [${e}]`);this.state=e,this.getState().isTrackingNextIndentation&&(this.shouldTrackNextIndentation=!0)}setInput(e){this.originalText=e.replace(/(\r\n)/g,"\n").replace(/\r/g,"\n").replace(/[\n\r]+$/,""),this.lines=this.originalText.split("\n"),this.reset()}getState(){return this.states[this.state]}getCurrentLine(){return this.lines[this.yylineno-1]}getCurrentLineIndentation(){return this.getCurrentLine().match(/^(\s*)/g)[0].length}getLastRecordedIndentation(){return 0===this.indentation.length?[0,!1]:this.indentation[this.indentation.length-1]}isAtTheEndOfText(){return this.isAtTheEndOfLine()&&this.yylloc.first_line>=this.lines.length}isAtTheEndOfLine(){return this.yylloc.last_column>this.getCurrentLine().length}},me.yy=d,me.yy.declarations={},me.yy.registerDeclaration=function(e,t,n){if(!this.areDeclarationsHandled){if(this.declarations[e])throw new Error(`Duplicate declaration found for variable: ${e}`);this.declarations[e]={variableName:e,expression:t,explicitType:n}}},n(271),n(495)})()})();